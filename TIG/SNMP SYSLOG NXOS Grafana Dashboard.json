{
  "__inputs": [
    {
      "name": "DS_INFLUXDB",
      "label": "InfluxDB",
      "description": "",
      "type": "datasource",
      "pluginId": "influxdb",
      "pluginName": "InfluxDB"
    },
    {
      "name": "DS_EXPRESSION",
      "label": "Expression",
      "description": "",
      "type": "datasource",
      "pluginId": "__expr__"
    }
  ],
  "__elements": {},
  "__requires": [
    {
      "type": "datasource",
      "id": "__expr__",
      "version": "1.0.0"
    },
    {
      "type": "panel",
      "id": "gauge",
      "name": "Gauge",
      "version": ""
    },
    {
      "type": "grafana",
      "id": "grafana",
      "name": "Grafana",
      "version": "9.2.5"
    },
    {
      "type": "datasource",
      "id": "influxdb",
      "name": "InfluxDB",
      "version": "1.0.0"
    },
    {
      "type": "panel",
      "id": "stat",
      "name": "Stat",
      "version": ""
    },
    {
      "type": "panel",
      "id": "table",
      "name": "Table",
      "version": ""
    },
    {
      "type": "panel",
      "id": "timeseries",
      "name": "Time series",
      "version": ""
    }
  ],
  "annotations": {
    "list": [
      {
        "$$hashKey": "object:3283",
        "builtIn": 1,
        "datasource": {
          "type": "datasource",
          "uid": "grafana"
        },
        "enable": true,
        "hide": true,
        "iconColor": "rgba(0, 211, 255, 1)",
        "name": "Annotations & Alerts",
        "target": {
          "limit": 100,
          "matchAny": false,
          "tags": [],
          "type": "dashboard"
        },
        "type": "dashboard"
      }
    ]
  },
  "description": "Device Dashboard via SNMPv3",
  "editable": true,
  "fiscalYearStartMonth": 0,
  "gnetId": 12476,
  "graphTooltip": 0,
  "id": null,
  "links": [],
  "liveNow": false,
  "panels": [
    {
      "datasource": {
        "type": "influxdb",
        "uid": "${DS_INFLUXDB}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "custom": {
            "align": "auto",
            "displayMode": "auto",
            "inspect": false
          },
          "mappings": [
            {
              "options": {
                "pattern": "CW_IMAGE\\$nxos\\.(.*?)\\.bin\\$",
                "result": {
                  "color": "dark-blue",
                  "index": 0,
                  "text": "$1"
                }
              },
              "type": "regex"
            }
          ],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              }
            ]
          },
          "unit": "string"
        },
        "overrides": []
      },
      "id": 324,
      "options": {
        "footer": {
          "fields": "",
          "reducer": [
            "sum"
          ],
          "show": false
        },
        "showHeader": true,
        "sortBy": [
          {
            "desc": true,
            "displayName": "Version"
          }
        ]
      },
      "pluginVersion": "9.2.5",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_INFLUXDB}"
          },
          "query": "from(bucket: \"tigstack\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"snmp\")\n  |> filter(fn: (r) => r[\"_field\"] == \"Version\")\n  |> filter(fn: (r) => r[\"agent_host\"] == \"${host}\")\n  |> last()\n",
          "refId": "A"
        }
      ],
      "title": "Switch Infos",
      "transformations": [
        {
          "id": "renameByRegex",
          "options": {
            "regex": "(Version.*)",
            "renamePattern": "Version"
          }
        }
      ],
      "type": "table"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "${DS_INFLUXDB}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "decimals": 1,
          "mappings": [
            {
              "options": {
                "match": "null",
                "result": {
                  "text": "N/A"
                }
              },
              "type": "special"
            }
          ],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "s"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 3,
        "w": 2,
        "x": 6,
        "y": 0
      },
      "id": 30,
      "links": [],
      "maxDataPoints": 100,
      "options": {
        "colorMode": "none",
        "graphMode": "none",
        "justifyMode": "auto",
        "orientation": "horizontal",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        },
        "textMode": "auto"
      },
      "pluginVersion": "9.2.5",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_INFLUXDB}"
          },
          "groupBy": [
            {
              "params": [
                "$__interval"
              ],
              "type": "time"
            },
            {
              "params": [
                "null"
              ],
              "type": "fill"
            }
          ],
          "measurement": "snmp",
          "orderByTime": "ASC",
          "policy": "default",
          "query": "from(bucket: \"tigstack\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"snmp\")\n  |> filter(fn: (r) => r[\"_field\"] == \"uptime\")\n  |> filter(fn: (r) => r[\"agent_host\"] == \"${host}\")\n  |> map(fn: (r) => ({ r with _value: r._value / 100 }))\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\n  |> yield()\n",
          "rawQuery": true,
          "refId": "A",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "uptime"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              },
              {
                "params": [
                  " / 100"
                ],
                "type": "math"
              }
            ]
          ],
          "tags": [
            {
              "key": "agent_host",
              "operator": "=~",
              "value": "/^$host$/"
            }
          ]
        }
      ],
      "title": "Uptime",
      "transformations": [],
      "type": "stat"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "${DS_INFLUXDB}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "decimals": 0,
          "mappings": [
            {
              "options": {
                "match": "null",
                "result": {
                  "text": "N/A"
                }
              },
              "type": "special"
            }
          ],
          "max": 100,
          "min": 0,
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "#37872D",
                "value": null
              },
              {
                "color": "#FA6400",
                "value": 50
              },
              {
                "color": "#C4162A",
                "value": 90
              }
            ]
          },
          "unit": "percent"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 3,
        "w": 2,
        "x": 8,
        "y": 0
      },
      "id": 56,
      "links": [],
      "maxDataPoints": 100,
      "options": {
        "orientation": "horizontal",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        },
        "showThresholdLabels": false,
        "showThresholdMarkers": true
      },
      "pluginVersion": "9.2.5",
      "targets": [
        {
          "alias": "CPU1m",
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_INFLUXDB}"
          },
          "groupBy": [
            {
              "params": [
                "$__interval"
              ],
              "type": "time"
            },
            {
              "params": [
                "null"
              ],
              "type": "fill"
            }
          ],
          "hide": false,
          "measurement": "snmp",
          "orderByTime": "ASC",
          "policy": "default",
          "query": "from(bucket: \"tigstack\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"snmp\")\n  |> filter(fn: (r) => r[\"_field\"] == \"CPU1m\")\n  |> filter(fn: (r) => r[\"agent_host\"] == \"${host}\")\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\n  |> yield(name: \"mean\")",
          "rawQuery": true,
          "refId": "A",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "CPU1m"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              }
            ]
          ],
          "tags": [
            {
              "key": "agent_host",
              "operator": "=~",
              "value": "/^$host$/"
            }
          ]
        }
      ],
      "title": "CPU 1min",
      "type": "gauge"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "${DS_INFLUXDB}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "mappings": [
            {
              "options": {
                "match": "null",
                "result": {
                  "text": "N/A"
                }
              },
              "type": "special"
            }
          ],
          "max": 100,
          "min": 0,
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "#37872D",
                "value": null
              },
              {
                "color": "#FA6400",
                "value": 50
              },
              {
                "color": "#C4162A",
                "value": 90
              }
            ]
          },
          "unit": "percent"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 3,
        "w": 2,
        "x": 10,
        "y": 0
      },
      "id": 57,
      "links": [],
      "maxDataPoints": 100,
      "options": {
        "orientation": "auto",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        },
        "showThresholdLabels": false,
        "showThresholdMarkers": true
      },
      "pluginVersion": "9.2.5",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_INFLUXDB}"
          },
          "groupBy": [
            {
              "params": [
                "$__interval"
              ],
              "type": "time"
            },
            {
              "params": [
                "null"
              ],
              "type": "fill"
            }
          ],
          "hide": true,
          "measurement": "snmp",
          "orderByTime": "ASC",
          "policy": "default",
          "query": "from(bucket: \"tigstack\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"snmp\")\n  |> filter(fn: (r) => r[\"_field\"] == \"MemUsed\")\n  |> filter(fn: (r) => r[\"agent_host\"] == \"${host}\")\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\n  |> yield(name: \"mean\")",
          "rawQuery": true,
          "refId": "A",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "MemFree"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              },
              {
                "params": [
                  "+"
                ],
                "type": "math"
              }
            ],
            [
              {
                "params": [
                  "MemFree"
                ],
                "type": "field"
              }
            ]
          ],
          "tags": [
            {
              "key": "agent_host",
              "operator": "=~",
              "value": "/^$host$/"
            }
          ]
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_INFLUXDB}"
          },
          "groupBy": [
            {
              "params": [
                "$__interval"
              ],
              "type": "time"
            },
            {
              "params": [
                "null"
              ],
              "type": "fill"
            }
          ],
          "hide": true,
          "measurement": "snmp",
          "orderByTime": "ASC",
          "policy": "default",
          "query": "from(bucket: \"tigstack\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"snmp\")\n  |> filter(fn: (r) => r[\"_field\"] == \"MemFree\")\n  |> filter(fn: (r) => r[\"agent_host\"] == \"${host}\")\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\n  |> yield(name: \"mean\")",
          "rawQuery": true,
          "refId": "B",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "MemFree"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              },
              {
                "params": [
                  "+"
                ],
                "type": "math"
              }
            ],
            [
              {
                "params": [
                  "MemFree"
                ],
                "type": "field"
              }
            ]
          ],
          "tags": [
            {
              "key": "agent_host",
              "operator": "=~",
              "value": "/^$host$/"
            }
          ]
        },
        {
          "datasource": {
            "type": "__expr__",
            "uid": "${DS_EXPRESSION}"
          },
          "expression": "round(($A * 100) / ($A + $B))",
          "hide": false,
          "reducer": "mean",
          "refId": "C",
          "type": "math"
        }
      ],
      "title": "Memory Used",
      "transformations": [],
      "type": "gauge"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "${DS_INFLUXDB}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "CPU",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "drawStyle": "line",
            "fillOpacity": 10,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "lineInterpolation": "linear",
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "never",
            "spanNulls": true,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "decimals": 0,
          "links": [],
          "mappings": [],
          "min": 0,
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "percent"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 4,
        "w": 12,
        "x": 12,
        "y": 0
      },
      "id": 310,
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": false
        },
        "tooltip": {
          "mode": "multi",
          "sort": "none"
        }
      },
      "pluginVersion": "9.2.4",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_INFLUXDB}"
          },
          "groupBy": [
            {
              "params": [
                "$__interval"
              ],
              "type": "time"
            },
            {
              "params": [
                "null"
              ],
              "type": "fill"
            }
          ],
          "measurement": "snmp",
          "orderByTime": "ASC",
          "policy": "default",
          "query": "from(bucket: \"tigstack\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"snmp\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"CPU1m\")\r\n  |> filter(fn: (r) => r[\"agent_host\"] == \"${host}\")\r\n",
          "refId": "A",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "CPU1m"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "mean"
              },
              {
                "params": [
                  "CPU"
                ],
                "type": "alias"
              }
            ],
            [
              {
                "params": [
                  "MemUsed"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "mean"
              },
              {
                "params": [
                  "*1000"
                ],
                "type": "math"
              },
              {
                "params": [
                  "Mem"
                ],
                "type": "alias"
              }
            ]
          ],
          "tags": [
            {
              "key": "agent_host",
              "operator": "=~",
              "value": "/^$host$/"
            }
          ]
        }
      ],
      "title": "CPU",
      "transformations": [
        {
          "id": "renameByRegex",
          "options": {
            "regex": "(CPU1m.*)",
            "renamePattern": "CPU1m"
          }
        }
      ],
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "${DS_INFLUXDB}"
      },
      "description": "PSU incl. Fabric Extender ",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "mappings": [],
          "max": 2,
          "min": 0,
          "noValue": "0",
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "dark-red",
                "value": 0
              },
              {
                "color": "dark-yellow",
                "value": 1
              },
              {
                "color": "dark-green",
                "value": 2
              }
            ]
          },
          "unit": "none"
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "FRU PSU_Status {agent_host=\"n9kv01\", host=\"poap\", index=\"22\", source=\"n9kv01\"}"
            },
            "properties": [
              {
                "id": "displayName",
                "value": "n9kv01"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "FRU PSU_Status {agent_host=\"n9kv02\", host=\"poap\", index=\"22\", source=\"n9kv02\"}"
            },
            "properties": [
              {
                "id": "displayName",
                "value": "n9kv02"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "FRU PSU_Status {agent_host=\"n9kv03\", host=\"poap\", index=\"22\", source=\"n9kv03\"}"
            },
            "properties": [
              {
                "id": "displayName",
                "value": "n9kv03"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "FRU PSU_Status {agent_host=\"n9kv04\", host=\"poap\", index=\"22\", source=\"n9kv04\"}"
            },
            "properties": [
              {
                "id": "displayName",
                "value": "n9kv04"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "FRU PSU_Status {agent_host=\"n9kv11\", host=\"poap\", index=\"22\", source=\"n9kv11\"}"
            },
            "properties": [
              {
                "id": "displayName",
                "value": "n9kv11"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "FRU PSU_Status {agent_host=\"n9kv12\", host=\"poap\", index=\"22\", source=\"n9kv12\"}"
            },
            "properties": [
              {
                "id": "displayName",
                "value": "n9kv12"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "_value"
            },
            "properties": [
              {
                "id": "displayName",
                "value": "All PSUs"
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 5,
        "w": 6,
        "x": 0,
        "y": 3
      },
      "id": 316,
      "links": [],
      "options": {
        "orientation": "auto",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        },
        "showThresholdLabels": false,
        "showThresholdMarkers": true
      },
      "pluginVersion": "9.2.5",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_INFLUXDB}"
          },
          "groupBy": [
            {
              "params": [
                "ifName"
              ],
              "type": "tag"
            },
            {
              "params": [
                "agent_name"
              ],
              "type": "tag"
            }
          ],
          "limit": "",
          "measurement": "IF",
          "orderByTime": "ASC",
          "policy": "default",
          "query": "from(bucket: \"tigstack\")\n  |> range(start: -20s, stop: now())\n  |> filter(fn: (r) => r[\"_measurement\"] == \"FRU\")\n  |> filter(fn: (r) => r[\"_field\"] == \"PSU_Status\")\n  |> filter(fn: (r) => r[\"agent_host\"] == \"n9kv01\" or r[\"agent_host\"] == \"n9kv02\" or r[\"agent_host\"] == \"n9kv03\" or r[\"agent_host\"] == \"n9kv04\" or r[\"agent_host\"] == \"n9kv11\" or r[\"agent_host\"] == \"n9kv12\")\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\n  |> yield(name: \"mean\")\n  |> group(columns: [\"PSU_Status\"])\n  |> sum(column: \"_value\")\n  |> group()\n",
          "rawQuery": true,
          "refId": "A",
          "resultFormat": "table",
          "select": [
            [
              {
                "params": [
                  "ifAdminStatus"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              }
            ]
          ],
          "slimit": "",
          "tags": [
            {
              "key": "ifOperStatus",
              "operator": "<",
              "value": "2"
            }
          ],
          "tz": ""
        }
      ],
      "title": "Power Supply States",
      "type": "gauge"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "${DS_INFLUXDB}"
      },
      "description": "FAN incl. Fabric Extender",
      "fieldConfig": {
        "defaults": {
          "mappings": [
            {
              "$$hashKey": "object:784",
              "id": 0,
              "op": "=",
              "text": "0",
              "type": 1,
              "value": "null"
            }
          ],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "#1F60C4",
                "value": null
              },
              {
                "color": "#1F60C4",
                "value": 0
              },
              {
                "color": "#1F60C4"
              }
            ]
          },
          "unit": "none"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 5,
        "w": 6,
        "x": 6,
        "y": 3
      },
      "id": 320,
      "links": [],
      "options": {
        "colorMode": "value",
        "graphMode": "none",
        "justifyMode": "auto",
        "orientation": "horizontal",
        "reduceOptions": {
          "calcs": [
            "first"
          ],
          "fields": "",
          "values": true
        },
        "textMode": "auto"
      },
      "pluginVersion": "9.2.5",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_INFLUXDB}"
          },
          "groupBy": [
            {
              "params": [
                "ifName"
              ],
              "type": "tag"
            },
            {
              "params": [
                "agent_name"
              ],
              "type": "tag"
            }
          ],
          "limit": "",
          "measurement": "IF",
          "orderByTime": "ASC",
          "policy": "default",
          "query": "from(bucket: \"tigstack\")\n  |> range(start: -10s, stop: now())\n  |> filter(fn: (r) => r[\"_measurement\"] == \"FRU\")\n  |> filter(fn: (r) => r[\"_field\"] == \"FAN_Status\")\n  |> filter(fn: (r) => r[\"agent_host\"] == \"n9kv01\" or r[\"agent_host\"] == \"n9kv02\" or r[\"agent_host\"] == \"n9kv03\" or r[\"agent_host\"] == \"n9kv04\" or r[\"agent_host\"] == \"n9kv11\" or r[\"agent_host\"] == \"n9kv12\")\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\n  |> yield(name: \"mean\")\n  |> group(columns: [\"FAN_Status\"])\n  |> sum(column: \"_value\")\n  |> group()\n  ",
          "rawQuery": true,
          "refId": "A",
          "resultFormat": "table",
          "select": [
            [
              {
                "params": [
                  "ifAdminStatus"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              }
            ]
          ],
          "slimit": "",
          "tags": [
            {
              "key": "ifOperStatus",
              "operator": "<",
              "value": "2"
            }
          ],
          "tz": ""
        }
      ],
      "title": "FAN Status",
      "type": "stat"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "${DS_INFLUXDB}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "MemUsed",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "drawStyle": "line",
            "fillOpacity": 0,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "lineInterpolation": "linear",
            "lineStyle": {
              "fill": "solid"
            },
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "auto",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "line"
            }
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              }
            ]
          },
          "unit": "deckbytes"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 4,
        "w": 12,
        "x": 12,
        "y": 4
      },
      "id": 322,
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": false
        },
        "tooltip": {
          "mode": "single",
          "sort": "none"
        }
      },
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_INFLUXDB}"
          },
          "query": "from(bucket: \"tigstack\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"snmp\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"MemUsed\")\r\n  |> filter(fn: (r) => r[\"agent_host\"] == \"${host}\")\r\n",
          "refId": "A"
        }
      ],
      "title": "Memory",
      "transformations": [
        {
          "id": "renameByRegex",
          "options": {
            "regex": "(MemUsed.*)",
            "renamePattern": "MemUsed"
          }
        }
      ],
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "${DS_INFLUXDB}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "align": "center",
            "displayMode": "lcd-gauge",
            "filterable": true,
            "inspect": false,
            "minWidth": 50
          },
          "mappings": [
            {
              "options": {
                "pattern": "^.*:(.*?)",
                "result": {
                  "index": 0,
                  "text": "$1"
                }
              },
              "type": "regex"
            }
          ],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              }
            ]
          },
          "unit": "string"
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "severity"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 267
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "_value"
            },
            "properties": [
              {
                "id": "custom.width"
              },
              {
                "id": "custom.displayMode",
                "value": "color-text"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "hostname"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 100
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "facility"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 100
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "_time"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 300
              },
              {
                "id": "custom.displayMode",
                "value": "color-text"
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 13,
        "w": 24,
        "x": 0,
        "y": 8
      },
      "id": 60,
      "links": [],
      "maxDataPoints": 4000,
      "options": {
        "footer": {
          "enablePagination": true,
          "fields": "",
          "reducer": [
            "sum"
          ],
          "show": false
        },
        "showHeader": true,
        "sortBy": [
          {
            "desc": true,
            "displayName": "_time"
          }
        ]
      },
      "pluginVersion": "9.2.5",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_INFLUXDB}"
          },
          "hide": false,
          "query": "from(bucket: \"tigstack\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"appname\"] == \"${host}\")\n  |> filter(fn: (r) => r[\"_measurement\"] == \"syslog\")\n  |> filter(fn: (r) => r[\"_field\"] == \"message\")\n  |> group()\n  ",
          "refId": "A"
        }
      ],
      "timeFrom": "12h",
      "title": "Syslog messages",
      "transformations": [
        {
          "id": "seriesToRows",
          "options": {
            "reducers": []
          }
        },
        {
          "id": "groupBy",
          "options": {
            "fields": {
              "Metric": {
                "aggregations": []
              },
              "Time": {
                "aggregations": [],
                "operation": "groupby"
              },
              "Value": {
                "aggregations": [],
                "operation": "groupby"
              },
              "_field": {
                "aggregations": []
              },
              "_measurement": {
                "aggregations": []
              },
              "_time": {
                "aggregations": [],
                "operation": "groupby"
              },
              "_value": {
                "aggregations": [],
                "operation": "groupby"
              },
              "_value {_start=\"2022-11-21 08:48:31.642 +0000 UTC\", _stop=\"2022-11-21 14:48:31.642 +0000 UTC\"}": {
                "aggregations": [],
                "operation": "groupby"
              },
              "appname": {
                "aggregations": []
              },
              "facility": {
                "aggregations": [],
                "operation": "groupby"
              },
              "facility {_start=\"2022-11-21 08:48:31.642 +0000 UTC\", _stop=\"2022-11-21 14:48:31.642 +0000 UTC\"}": {
                "aggregations": [],
                "operation": "groupby"
              },
              "hostname": {
                "aggregations": [],
                "operation": "groupby"
              },
              "hostname {_start=\"2022-11-21 08:48:31.642 +0000 UTC\", _stop=\"2022-11-21 14:48:31.642 +0000 UTC\"}": {
                "aggregations": []
              },
              "message": {
                "aggregations": [],
                "operation": "groupby"
              },
              "severity": {
                "aggregations": [],
                "operation": "groupby"
              },
              "severity {_start=\"2022-11-21 08:48:31.642 +0000 UTC\", _stop=\"2022-11-21 14:48:31.642 +0000 UTC\"}": {
                "aggregations": [],
                "operation": "groupby"
              },
              "source": {
                "aggregations": []
              },
              "source {_start=\"2022-11-21 08:48:31.642 +0000 UTC\", _stop=\"2022-11-21 14:48:31.642 +0000 UTC\"}": {
                "aggregations": []
              }
            }
          }
        },
        {
          "id": "renameByRegex",
          "options": {
            "regex": "(_time)",
            "renamePattern": "time"
          }
        },
        {
          "id": "renameByRegex",
          "options": {
            "regex": "(_value)",
            "renamePattern": "message"
          }
        }
      ],
      "type": "table"
    },
    {
      "collapsed": false,
      "datasource": {
        "type": "influxdb",
        "uid": "QX4KdWO4k"
      },
      "gridPos": {
        "h": 1,
        "w": 24,
        "x": 0,
        "y": 21
      },
      "id": 4,
      "panels": [],
      "repeat": "ifName",
      "repeatDirection": "h",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "QX4KdWO4k"
          },
          "refId": "A"
        }
      ],
      "title": "Interface Statistics",
      "type": "row"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "${DS_INFLUXDB}"
      },
      "description": "",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "continuous-BlYlRd"
          },
          "custom": {
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "",
            "axisPlacement": "hidden",
            "barAlignment": 0,
            "drawStyle": "line",
            "fillOpacity": 10,
            "gradientMode": "opacity",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "lineInterpolation": "linear",
            "lineStyle": {
              "dash": [
                0,
                10
              ],
              "fill": "dot"
            },
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "log": 10,
              "type": "log"
            },
            "showPoints": "never",
            "spanNulls": true,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "line"
            }
          },
          "links": [],
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              }
            ]
          },
          "unit": "packets"
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "ifInDiscards"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "dark-red",
                  "mode": "fixed"
                }
              },
              {
                "id": "unit",
                "value": "packets"
              },
              {
                "id": "custom.transform",
                "value": "negative-Y"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "ifInErrors"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "dark-orange",
                  "mode": "fixed"
                }
              },
              {
                "id": "unit",
                "value": "packets"
              },
              {
                "id": "custom.transform",
                "value": "negative-Y"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "ifInUnknownProtos"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "dark-yellow",
                  "mode": "fixed"
                }
              },
              {
                "id": "custom.transform",
                "value": "negative-Y"
              },
              {
                "id": "unit",
                "value": "packets"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "ifOutDiscards"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "dark-green",
                  "mode": "fixed"
                }
              },
              {
                "id": "unit",
                "value": "packets"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "ifOutErrors"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "#8F3BB8",
                  "mode": "fixed"
                }
              },
              {
                "id": "unit",
                "value": "packets"
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 12,
        "w": 24,
        "x": 0,
        "y": 22
      },
      "id": 2,
      "interval": "",
      "links": [],
      "options": {
        "legend": {
          "calcs": [
            "lastNotNull"
          ],
          "displayMode": "table",
          "placement": "right",
          "showLegend": true
        },
        "tooltip": {
          "mode": "multi",
          "sort": "none"
        }
      },
      "pluginVersion": "9.2.4",
      "repeat": "ifName",
      "repeatDirection": "v",
      "targets": [
        {
          "alias": "",
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_INFLUXDB}"
          },
          "groupBy": [
            {
              "params": [
                "$__interval"
              ],
              "type": "time"
            },
            {
              "params": [
                "null"
              ],
              "type": "fill"
            }
          ],
          "measurement": "IF",
          "orderByTime": "ASC",
          "policy": "default",
          "query": "from(bucket: \"tigstack\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"IF\")\n  |> filter(fn: (r) => r[\"_field\"] == \"ifInDiscards\" or r[\"_field\"] == \"ifInErrors\" or r[\"_field\"] == \"ifInUnknownProtos\" or r[\"_field\"] == \"ifOutDiscards\" or r[\"_field\"] == \"ifOutErrors\")\n  |> filter(fn: (r) => r[\"ifName\"] == \"${ifName}\")\n  |> filter(fn: (r) => r[\"agent_host\"] == \"${host}\")\n",
          "rawQuery": false,
          "refId": "A",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "ifHCInOctets"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "mean"
              },
              {
                "params": [
                  "1s"
                ],
                "type": "non_negative_derivative"
              },
              {
                "params": [
                  "*8"
                ],
                "type": "math"
              },
              {
                "params": [
                  "Bits_IN"
                ],
                "type": "alias"
              }
            ],
            [
              {
                "params": [
                  "ifHCOutOctets"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "mean"
              },
              {
                "params": [
                  "1s"
                ],
                "type": "non_negative_derivative"
              },
              {
                "params": [
                  "*8"
                ],
                "type": "math"
              },
              {
                "params": [
                  "Bits_Out"
                ],
                "type": "alias"
              }
            ],
            [
              {
                "params": [
                  "ifInDiscards"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "mean"
              },
              {
                "params": [
                  "1s"
                ],
                "type": "derivative"
              },
              {
                "params": [
                  "Discards_IN"
                ],
                "type": "alias"
              }
            ],
            [
              {
                "params": [
                  "ifOutDiscards"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "mean"
              },
              {
                "params": [
                  "1s"
                ],
                "type": "derivative"
              },
              {
                "params": [
                  "Discards_Out"
                ],
                "type": "alias"
              }
            ],
            [
              {
                "params": [
                  "ifInErrors"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "mean"
              },
              {
                "params": [
                  "1s"
                ],
                "type": "derivative"
              },
              {
                "params": [
                  "Errors_IN"
                ],
                "type": "alias"
              }
            ],
            [
              {
                "params": [
                  "ifOutErrors"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "mean"
              },
              {
                "params": [
                  "1s"
                ],
                "type": "derivative"
              },
              {
                "params": [
                  "Errors_OUT"
                ],
                "type": "alias"
              }
            ],
            [
              {
                "params": [
                  "ifInUnknownProtos"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "mean"
              },
              {
                "params": [
                  "1s"
                ],
                "type": "derivative"
              },
              {
                "params": [
                  "UnknownProto_IN"
                ],
                "type": "alias"
              }
            ]
          ],
          "tags": [
            {
              "key": "ifName",
              "operator": "=~",
              "value": "/^$ifName$/"
            },
            {
              "condition": "AND",
              "key": "agent_host",
              "operator": "=~",
              "value": "/^$host$/"
            }
          ]
        }
      ],
      "title": "Interface $ifName Errors",
      "transformations": [
        {
          "id": "renameByRegex",
          "options": {
            "regex": "(ifInDiscards).*",
            "renamePattern": "$1"
          }
        },
        {
          "id": "renameByRegex",
          "options": {
            "regex": "(ifInErrors).*",
            "renamePattern": "$1"
          }
        },
        {
          "id": "renameByRegex",
          "options": {
            "regex": "(ifInUnknownProtos).*",
            "renamePattern": "$1"
          }
        },
        {
          "id": "renameByRegex",
          "options": {
            "regex": "(ifOutDiscards).*",
            "renamePattern": "$1"
          }
        },
        {
          "id": "renameByRegex",
          "options": {
            "regex": "(ifOutErrors).*",
            "renamePattern": "$1"
          }
        }
      ],
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "${DS_INFLUXDB}"
      },
      "description": "",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "mappings": [
            {
              "options": {
                "1": {
                  "color": "dark-green",
                  "index": 4,
                  "text": "UP"
                },
                "2": {
                  "color": "dark-red",
                  "index": 5,
                  "text": "DOWN"
                },
                "1000": {
                  "color": "super-light-purple",
                  "index": 0,
                  "text": "1G"
                },
                "10000": {
                  "color": "purple",
                  "index": 1,
                  "text": "10G"
                },
                "40000": {
                  "color": "semi-dark-purple",
                  "index": 2,
                  "text": "40G"
                },
                "100000": {
                  "color": "dark-purple",
                  "index": 3,
                  "text": "100G"
                }
              },
              "type": "value"
            }
          ],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 3,
        "w": 6,
        "x": 9,
        "y": 790
      },
      "id": 62,
      "links": [],
      "options": {
        "colorMode": "value",
        "graphMode": "area",
        "justifyMode": "auto",
        "orientation": "auto",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        },
        "textMode": "auto"
      },
      "pluginVersion": "9.2.5",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_INFLUXDB}"
          },
          "groupBy": [
            {
              "params": [
                "ifName"
              ],
              "type": "tag"
            },
            {
              "params": [
                "ifAlias"
              ],
              "type": "tag"
            },
            {
              "params": [
                "ifOperStatusCause"
              ],
              "type": "tag"
            }
          ],
          "measurement": "IF",
          "orderByTime": "ASC",
          "policy": "default",
          "query": "from(bucket: \"tigstack\")\n  |> range(start: -20s, stop: now())\n  |> filter(fn: (r) => r[\"_measurement\"] == \"IF\")\n  |> filter(fn: (r) => r[\"_field\"] == \"ifAdminStatus\" or r[\"_field\"] == \"ifHighSpeed\" or r[\"_field\"] == \"ifOperStatus\")\n  |> filter(fn: (r) => r[\"agent_host\"] == \"${host}\")\n  |> filter(fn: (r) => r[\"ifName\"] == \"${ifName}\")\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\n  |> yield(name: \"mean\")\n",
          "rawQuery": true,
          "refId": "A",
          "resultFormat": "table",
          "select": [
            [
              {
                "params": [
                  "ifAdminStatus"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              },
              {
                "params": [
                  "AdminStatus"
                ],
                "type": "alias"
              }
            ],
            [
              {
                "params": [
                  "ifOperStatus"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              },
              {
                "params": [
                  "OperStatus"
                ],
                "type": "alias"
              }
            ],
            [
              {
                "params": [
                  "ifHighSpeed"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              },
              {
                "params": [
                  "Speed"
                ],
                "type": "alias"
              }
            ]
          ],
          "tags": [
            {
              "key": "agent_host",
              "operator": "=~",
              "value": "/^$host$/"
            },
            {
              "condition": "AND",
              "key": "ifName",
              "operator": "=~",
              "value": "/^$ifName$/"
            }
          ]
        }
      ],
      "title": "Interface ${ifName} Current State",
      "transformations": [
        {
          "id": "joinByField",
          "options": {}
        },
        {
          "id": "renameByRegex",
          "options": {
            "regex": "(ifAdminStatus.*)",
            "renamePattern": "Admin Status"
          }
        },
        {
          "id": "renameByRegex",
          "options": {
            "regex": "(ifHighSpeed.*)",
            "renamePattern": "Interface Speed"
          }
        },
        {
          "id": "renameByRegex",
          "options": {
            "regex": "(ifOperStatus.*)",
            "renamePattern": "Operational Status"
          }
        }
      ],
      "type": "stat"
    }
  ],
  "refresh": false,
  "schemaVersion": 37,
  "style": "dark",
  "tags": [
    "menu"
  ],
  "templating": {
    "list": [
      {
        "current": {},
        "datasource": {
          "type": "influxdb",
          "uid": "${DS_INFLUXDB}"
        },
        "definition": "import \"influxdata/influxdb/v1\"\nv1.tagValues(\n    bucket: v.bucket,\n    tag: \"agent_host\",\n    predicate: (r) => true,\n    start: -1d\n)",
        "hide": 0,
        "includeAll": false,
        "label": "Host",
        "multi": false,
        "name": "host",
        "options": [],
        "query": "import \"influxdata/influxdb/v1\"\nv1.tagValues(\n    bucket: v.bucket,\n    tag: \"agent_host\",\n    predicate: (r) => true,\n    start: -1d\n)",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "tagValuesQuery": "",
        "tagsQuery": "",
        "type": "query",
        "useTags": false
      },
      {
        "current": {},
        "datasource": {
          "type": "influxdb",
          "uid": "${DS_INFLUXDB}"
        },
        "definition": "import \"influxdata/influxdb/v1\"\nv1.tagValues(\n    bucket: v.bucket,\n    tag: \"ifName\",\n    predicate: (r) => true,\n    start: -1d\n)",
        "hide": 0,
        "includeAll": true,
        "label": "ifName",
        "multi": true,
        "name": "ifName",
        "options": [],
        "query": "import \"influxdata/influxdb/v1\"\nv1.tagValues(\n    bucket: v.bucket,\n    tag: \"ifName\",\n    predicate: (r) => true,\n    start: -1d\n)",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 1,
        "tagValuesQuery": "",
        "tagsQuery": "",
        "type": "query",
        "useTags": false
      }
    ]
  },
  "time": {
    "from": "now-6h",
    "to": "now"
  },
  "timepicker": {
    "refresh_intervals": [
      "5s",
      "10s",
      "30s",
      "1m",
      "5m",
      "15m",
      "30m",
      "1h",
      "2h",
      "1d"
    ],
    "time_options": [
      "5m",
      "15m",
      "1h",
      "6h",
      "12h",
      "24h",
      "2d",
      "7d",
      "30d"
    ]
  },
  "timezone": "",
  "title": "Cisco NXOS Switch SNMP Style",
  "uid": "fTHGaZmRz",
  "version": 85,
  "weekStart": ""
}
